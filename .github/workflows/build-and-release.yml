name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        # os: [windows-latest, macos-latest, ubuntu-latest]  # macOS disabled due to build issues
        arch: [x64]
        # arch: [x64, arm64]  # Disabled arm64 for now
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ matrix.arch }}
          cache: 'npm'
          
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
        shell: bash

      # Clean install dependencies
      - name: Install Dependencies
        run: npm ci
        
      # Update package.json version to match tag/input
      - name: Update package.json version
        shell: bash
        run: |
          # Extract version number without 'v' prefix
          VERSION_NUMBER=$(echo "${{ env.VERSION }}" | sed 's/^v//')
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Target version: $VERSION_NUMBER"
          
          if [ "$CURRENT_VERSION" != "$VERSION_NUMBER" ]; then
            echo "Updating package.json version to: $VERSION_NUMBER"
            npm version $VERSION_NUMBER --no-git-tag-version
            echo "Updated package.json version:"
            node -p "require('./package.json').version"
          else
            echo "Package.json version already matches target version, skipping update"
          fi
        
      # Build the application
      - name: Build Application
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARCH: ${{ matrix.arch }}
          # macOS signing and notarization (disabled)
          # CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
          # CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
      # List both possible output directories
      - name: List output directories
        shell: bash
        run: |
          echo "Checking for output directories..."
          if [ -d "release" ]; then
            echo "Release directory contents:"
            ls -la release/
          fi
          if [ -d "dist" ]; then
            echo "Dist directory contents:"
            ls -la dist/
          fi
          echo "Current directory contents:"
          ls -la
        
      # Rename and organize artifacts
      - name: Process Artifacts
        shell: bash
        run: |
          mkdir -p ./artifacts
          
          # Check both release and dist directories
          OUTPUT_DIR=""
          if [ -d "release" ] && [ "$(ls -A release 2>/dev/null)" ]; then
            OUTPUT_DIR="release"
          elif [ -d "dist" ] && [ "$(ls -A dist 2>/dev/null)" ]; then
            OUTPUT_DIR="dist"
          else
            echo "Error: No build output directory found!"
            exit 1
          fi
          
          echo "Using output directory: $OUTPUT_DIR"
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Find and copy Windows executable
            EXE_FILE=$(find $OUTPUT_DIR -name "*.exe" -type f | head -1)
            if [ -n "$EXE_FILE" ]; then
              echo "Found Windows executable: $EXE_FILE"
              cp "$EXE_FILE" "./artifacts/lazy_project_launcher_${{ env.VERSION }}_win_setup.exe"
              echo "File size: $(ls -lh "$EXE_FILE" | awk '{print $5}')"
            else
              echo "Error: No Windows executable found!"
              exit 1
            fi
          else
            # Find and copy Linux AppImage
            APPIMAGE_FILE=$(find $OUTPUT_DIR -name "*.AppImage" -type f | head -1)
            if [ -n "$APPIMAGE_FILE" ]; then
              echo "Found Linux AppImage: $APPIMAGE_FILE"
              cp "$APPIMAGE_FILE" "./artifacts/lazy_project_launcher_${{ env.VERSION }}_linux.AppImage"
              echo "File size: $(ls -lh "$APPIMAGE_FILE" | awk '{print $5}')"
            else
              echo "Error: No Linux AppImage found!"
              exit 1
            fi
          fi
          
          # 显示artifacts目录内容以验证
          echo "Artifacts directory contents:"
          ls -la ./artifacts/
        
      # Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: artifacts/*
          retention-days: 1
          
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: List Files
        run: ls -R
        working-directory: artifacts
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Lazy Project Launcher ${{ github.event.inputs.version || github.ref_name }}
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
